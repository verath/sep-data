// NOTE: this file is generated by generate_output_data.py

use super::types::*;

#[derive(Debug, PartialEq)]
pub enum SEOutputData {
    SEFrameNumber(SETypeU32),
    SEEstimatedDelay(SETypeU32),
    SETimeStamp(SETypeU64),
    SEUserTimeStamp(SETypeU64),
    SEFrameRate(SETypeF64),
    SECameraPositions(SETypeVector),
    SECameraRotations(SETypeVector),
    SEUserDefinedData(SETypeU64),
    SERealTimeClock(SETypeU64),
    SEHeadPosition(SETypePoint3D),
    SEHeadPositionQ(SETypeF64),
    SEHeadRotationRodrigues(SETypeVect3D),
    SEHeadRotationQuaternion(SETypeQuaternion),
    SEHeadLeftEarDirection(SETypeVect3D),
    SEHeadUpDirection(SETypeVect3D),
    SEHeadNoseDirection(SETypeVect3D),
    SEHeadHeading(SETypeF64),
    SEHeadPitch(SETypeF64),
    SEHeadRoll(SETypeF64),
    SEHeadRotationQ(SETypeF64),
    SEGazeOrigin(SETypePoint3D),
    SELeftGazeOrigin(SETypePoint3D),
    SERightGazeOrigin(SETypePoint3D),
    SEEyePosition(SETypePoint3D),
    SEGazeDirection(SETypeVect3D),
    SEGazeDirectionQ(SETypeF64),
    SELeftEyePosition(SETypePoint3D),
    SELeftGazeDirection(SETypeVect3D),
    SELeftGazeDirectionQ(SETypeF64),
    SERightEyePosition(SETypePoint3D),
    SERightGazeDirection(SETypeVect3D),
    SERightGazeDirectionQ(SETypeF64),
    SEGazeHeading(SETypeF64),
    SEGazePitch(SETypeF64),
    SELeftGazeHeading(SETypeF64),
    SELeftGazePitch(SETypeF64),
    SERightGazeHeading(SETypeF64),
    SERightGazePitch(SETypeF64),
    SEFilteredGazeDirection(SETypeVect3D),
    SEFilteredGazeDirectionQ(SETypeF64),
    SEFilteredLeftGazeDirection(SETypeVect3D),
    SEFilteredLeftGazeDirectionQ(SETypeF64),
    SEFilteredRightGazeDirection(SETypeVect3D),
    SEFilteredRightGazeDirectionQ(SETypeF64),
    SEFilteredGazeHeading(SETypeF64),
    SEFilteredGazePitch(SETypeF64),
    SEFilteredLeftGazeHeading(SETypeF64),
    SEFilteredLeftGazePitch(SETypeF64),
    SEFilteredRightGazeHeading(SETypeF64),
    SEFilteredRightGazePitch(SETypeF64),
    SESaccade(SETypeU32),
    SEFixation(SETypeU32),
    SEBlink(SETypeU32),
    SEClosestWorldIntersection(SETypeWorldIntersection),
    SEFilteredClosestWorldIntersection(SETypeWorldIntersection),
    SEAllWorldIntersections(SETypeWorldIntersections),
    SEFilteredAllWorldIntersections(SETypeWorldIntersections),
    SEZoneId(SETypeU16),
    SEEstimatedClosestWorldIntersection(SETypeWorldIntersection),
    SEEstimatedAllWorldIntersections(SETypeWorldIntersections),
    SEHeadClosestWorldIntersection(SETypeWorldIntersection),
    SEHeadAllWorldIntersections(SETypeWorldIntersections),
    SEEyelidOpening(SETypeF64),
    SEEyelidOpeningQ(SETypeF64),
    SELeftEyelidOpening(SETypeF64),
    SELeftEyelidOpeningQ(SETypeF64),
    SERightEyelidOpening(SETypeF64),
    SERightEyelidOpeningQ(SETypeF64),
    SEKeyboardState(SETypeString),
    SELeftLowerEyelidExtremePoint(SETypePoint3D),
    SELeftUpperEyelidExtremePoint(SETypePoint3D),
    SERightLowerEyelidExtremePoint(SETypePoint3D),
    SERightUpperEyelidExtremePoint(SETypePoint3D),
    SEPupilDiameter(SETypeF64),
    SEPupilDiameterQ(SETypeF64),
    SELeftPupilDiameter(SETypeF64),
    SELeftPupilDiameterQ(SETypeF64),
    SERightPupilDiameter(SETypeF64),
    SERightPupilDiameterQ(SETypeF64),
    SEFilteredPupilDiameter(SETypeF64),
    SEFilteredPupilDiameterQ(SETypeF64),
    SEFilteredLeftPupilDiameter(SETypeF64),
    SEFilteredLeftPupilDiameterQ(SETypeF64),
    SEFilteredRightPupilDiameter(SETypeF64),
    SEFilteredRightPupilDiameterQ(SETypeF64),
    SEGPSPosition(SETypePoint2D),
    SEGPSGroundSpeed(SETypeF64),
    SEGPSCourse(SETypeF64),
    SEGPSTime(SETypeU64),
    SEEstimatedGazeOrigin(SETypePoint3D),
    SEEstimatedLeftGazeOrigin(SETypePoint3D),
    SEEstimatedRightGazeOrigin(SETypePoint3D),
    SEEstimatedEyePosition(SETypePoint3D),
    SEEstimatedGazeDirection(SETypeVect3D),
    SEEstimatedGazeDirectionQ(SETypeF64),
    SEEstimatedGazeHeading(SETypeF64),
    SEEstimatedGazePitch(SETypeF64),
    SEEstimatedLeftEyePosition(SETypePoint3D),
    SEEstimatedLeftGazeDirection(SETypeVect3D),
    SEEstimatedLeftGazeDirectionQ(SETypeF64),
    SEEstimatedLeftGazeHeading(SETypeF64),
    SEEstimatedLeftGazePitch(SETypeF64),
    SEEstimatedRightEyePosition(SETypePoint3D),
    SEEstimatedRightGazeDirection(SETypeVect3D),
    SEEstimatedRightGazeDirectionQ(SETypeF64),
    SEEstimatedRightGazeHeading(SETypeF64),
    SEEstimatedRightGazePitch(SETypeF64),
    SEFilteredEstimatedGazeDirection(SETypeVect3D),
    SEFilteredEstimatedGazeDirectionQ(SETypeF64),
    SEFilteredEstimatedGazeHeading(SETypeF64),
    SEFilteredEstimatedGazePitch(SETypeF64),
    SEFilteredEstimatedLeftGazeDirection(SETypeVect3D),
    SEFilteredEstimatedLeftGazeDirectionQ(SETypeF64),
    SEFilteredEstimatedLeftGazeHeading(SETypeF64),
    SEFilteredEstimatedLeftGazePitch(SETypeF64),
    SEFilteredEstimatedRightGazeDirection(SETypeVect3D),
    SEFilteredEstimatedRightGazeDirectionQ(SETypeF64),
    SEFilteredEstimatedRightGazeHeading(SETypeF64),
    SEFilteredEstimatedRightGazePitch(SETypeF64),
    SEASCIIKeyboardState(SETypeU16),
    SECalibrationGazeIntersection(SETypeWorldIntersection),
    SETaggedGazeIntersection(SETypeWorldIntersection),
    SELeftClosestWorldIntersection(SETypeWorldIntersection),
    SELeftAllWorldIntersections(SETypeWorldIntersections),
    SERightClosestWorldIntersection(SETypeWorldIntersection),
    SERightAllWorldIntersections(SETypeWorldIntersections),
    SEFilteredLeftClosestWorldIntersection(SETypeWorldIntersection),
    SEFilteredLeftAllWorldIntersections(SETypeWorldIntersections),
    SEFilteredRightClosestWorldIntersection(SETypeWorldIntersection),
    SEFilteredRightAllWorldIntersections(SETypeWorldIntersections),
    SEEstimatedLeftClosestWorldIntersection(SETypeWorldIntersection),
    SEEstimatedLeftAllWorldIntersections(SETypeWorldIntersections),
    SEEstimatedRightClosestWorldIntersection(SETypeWorldIntersection),
    SEEstimatedRightAllWorldIntersections(SETypeWorldIntersections),
    SEFilteredEstimatedClosestWorldIntersection(SETypeWorldIntersection),
    SEFilteredEstimatedAllWorldIntersections(SETypeWorldIntersections),
    SEFilteredEstimatedLeftClosestWorldIntersection(SETypeWorldIntersection),
    SEFilteredEstimatedLeftAllWorldIntersections(SETypeWorldIntersections),
    SEFilteredEstimatedRightClosestWorldIntersection(SETypeWorldIntersection),
    SEFilteredEstimatedRightAllWorldIntersections(SETypeWorldIntersections),
    SETrackingState(SETypeU8),
    SEEyeglassesStatus(SETypeU8),
    SEReflexReductionStateDEPRECATED(SETypeU8),
    SELeftBlinkClosingMidTime(SETypeU64),
    SELeftBlinkOpeningMidTime(SETypeU64),
    SELeftBlinkClosingAmplitude(SETypeF64),
    SELeftBlinkOpeningAmplitude(SETypeF64),
    SELeftBlinkClosingSpeed(SETypeF64),
    SELeftBlinkOpeningSpeed(SETypeF64),
    SERightBlinkClosingMidTime(SETypeU64),
    SERightBlinkOpeningMidTime(SETypeU64),
    SERightBlinkClosingAmplitude(SETypeF64),
    SERightBlinkOpeningAmplitude(SETypeF64),
    SERightBlinkClosingSpeed(SETypeF64),
    SERightBlinkOpeningSpeed(SETypeF64),
    SELeftEyelidState(SETypeU8),
    SERightEyelidState(SETypeU8),
    SEUserMarker(SETypeUserMarker),
    SECameraClocks(SETypeVector),
}

#[derive(Debug, PartialEq, Eq, Clone, Copy)]
#[repr(u16)]
pub enum SEOutputDataId {
    SEFrameNumber = 0x01,
    SEEstimatedDelay = 0x02,
    SETimeStamp = 0x03,
    SEUserTimeStamp = 0x04,
    SEFrameRate = 0x05,
    SECameraPositions = 0x06,
    SECameraRotations = 0x07,
    SEUserDefinedData = 0x08,
    SERealTimeClock = 0x09,
    SEHeadPosition = 0x10,
    SEHeadPositionQ = 0x11,
    SEHeadRotationRodrigues = 0x12,
    SEHeadRotationQuaternion = 0x1d,
    SEHeadLeftEarDirection = 0x15,
    SEHeadUpDirection = 0x14,
    SEHeadNoseDirection = 0x13,
    SEHeadHeading = 0x16,
    SEHeadPitch = 0x17,
    SEHeadRoll = 0x18,
    SEHeadRotationQ = 0x19,
    SEGazeOrigin = 0x1a,
    SELeftGazeOrigin = 0x1b,
    SERightGazeOrigin = 0x1c,
    SEEyePosition = 0x20,
    SEGazeDirection = 0x21,
    SEGazeDirectionQ = 0x22,
    SELeftEyePosition = 0x23,
    SELeftGazeDirection = 0x24,
    SELeftGazeDirectionQ = 0x25,
    SERightEyePosition = 0x26,
    SERightGazeDirection = 0x27,
    SERightGazeDirectionQ = 0x28,
    SEGazeHeading = 0x29,
    SEGazePitch = 0x2a,
    SELeftGazeHeading = 0x2b,
    SELeftGazePitch = 0x2c,
    SERightGazeHeading = 0x2d,
    SERightGazePitch = 0x2e,
    SEFilteredGazeDirection = 0x30,
    SEFilteredGazeDirectionQ = 0x31,
    SEFilteredLeftGazeDirection = 0x32,
    SEFilteredLeftGazeDirectionQ = 0x33,
    SEFilteredRightGazeDirection = 0x34,
    SEFilteredRightGazeDirectionQ = 0x35,
    SEFilteredGazeHeading = 0x36,
    SEFilteredGazePitch = 0x37,
    SEFilteredLeftGazeHeading = 0x38,
    SEFilteredLeftGazePitch = 0x39,
    SEFilteredRightGazeHeading = 0x3a,
    SEFilteredRightGazePitch = 0x3b,
    SESaccade = 0x3d,
    SEFixation = 0x3e,
    SEBlink = 0x3f,
    SEClosestWorldIntersection = 0x40,
    SEFilteredClosestWorldIntersection = 0x41,
    SEAllWorldIntersections = 0x42,
    SEFilteredAllWorldIntersections = 0x43,
    SEZoneId = 0x44,
    SEEstimatedClosestWorldIntersection = 0x45,
    SEEstimatedAllWorldIntersections = 0x46,
    SEHeadClosestWorldIntersection = 0x49,
    SEHeadAllWorldIntersections = 0x4a,
    SEEyelidOpening = 0x50,
    SEEyelidOpeningQ = 0x51,
    SELeftEyelidOpening = 0x52,
    SELeftEyelidOpeningQ = 0x53,
    SERightEyelidOpening = 0x54,
    SERightEyelidOpeningQ = 0x55,
    SEKeyboardState = 0x56,
    SELeftLowerEyelidExtremePoint = 0x58,
    SELeftUpperEyelidExtremePoint = 0x59,
    SERightLowerEyelidExtremePoint = 0x5a,
    SERightUpperEyelidExtremePoint = 0x5b,
    SEPupilDiameter = 0x60,
    SEPupilDiameterQ = 0x61,
    SELeftPupilDiameter = 0x62,
    SELeftPupilDiameterQ = 0x63,
    SERightPupilDiameter = 0x64,
    SERightPupilDiameterQ = 0x65,
    SEFilteredPupilDiameter = 0x66,
    SEFilteredPupilDiameterQ = 0x67,
    SEFilteredLeftPupilDiameter = 0x68,
    SEFilteredLeftPupilDiameterQ = 0x69,
    SEFilteredRightPupilDiameter = 0x6a,
    SEFilteredRightPupilDiameterQ = 0x6b,
    SEGPSPosition = 0x70,
    SEGPSGroundSpeed = 0x71,
    SEGPSCourse = 0x72,
    SEGPSTime = 0x73,
    SEEstimatedGazeOrigin = 0x7a,
    SEEstimatedLeftGazeOrigin = 0x7b,
    SEEstimatedRightGazeOrigin = 0x7c,
    SEEstimatedEyePosition = 0x80,
    SEEstimatedGazeDirection = 0x81,
    SEEstimatedGazeDirectionQ = 0x82,
    SEEstimatedGazeHeading = 0x83,
    SEEstimatedGazePitch = 0x84,
    SEEstimatedLeftEyePosition = 0x85,
    SEEstimatedLeftGazeDirection = 0x86,
    SEEstimatedLeftGazeDirectionQ = 0x87,
    SEEstimatedLeftGazeHeading = 0x88,
    SEEstimatedLeftGazePitch = 0x89,
    SEEstimatedRightEyePosition = 0x8a,
    SEEstimatedRightGazeDirection = 0x8b,
    SEEstimatedRightGazeDirectionQ = 0x8c,
    SEEstimatedRightGazeHeading = 0x8d,
    SEEstimatedRightGazePitch = 0x8e,
    SEFilteredEstimatedGazeDirection = 0x91,
    SEFilteredEstimatedGazeDirectionQ = 0x92,
    SEFilteredEstimatedGazeHeading = 0x93,
    SEFilteredEstimatedGazePitch = 0x94,
    SEFilteredEstimatedLeftGazeDirection = 0x96,
    SEFilteredEstimatedLeftGazeDirectionQ = 0x97,
    SEFilteredEstimatedLeftGazeHeading = 0x98,
    SEFilteredEstimatedLeftGazePitch = 0x99,
    SEFilteredEstimatedRightGazeDirection = 0x9b,
    SEFilteredEstimatedRightGazeDirectionQ = 0x9c,
    SEFilteredEstimatedRightGazeHeading = 0x9d,
    SEFilteredEstimatedRightGazePitch = 0x9e,
    SEASCIIKeyboardState = 0xa4,
    SECalibrationGazeIntersection = 0xb0,
    SETaggedGazeIntersection = 0xb1,
    SELeftClosestWorldIntersection = 0xb2,
    SELeftAllWorldIntersections = 0xb3,
    SERightClosestWorldIntersection = 0xb4,
    SERightAllWorldIntersections = 0xb5,
    SEFilteredLeftClosestWorldIntersection = 0xb6,
    SEFilteredLeftAllWorldIntersections = 0xb7,
    SEFilteredRightClosestWorldIntersection = 0xb8,
    SEFilteredRightAllWorldIntersections = 0xb9,
    SEEstimatedLeftClosestWorldIntersection = 0xba,
    SEEstimatedLeftAllWorldIntersections = 0xbb,
    SEEstimatedRightClosestWorldIntersection = 0xbc,
    SEEstimatedRightAllWorldIntersections = 0xbd,
    SEFilteredEstimatedClosestWorldIntersection = 0x141,
    SEFilteredEstimatedAllWorldIntersections = 0x143,
    SEFilteredEstimatedLeftClosestWorldIntersection = 0x1b6,
    SEFilteredEstimatedLeftAllWorldIntersections = 0x1b7,
    SEFilteredEstimatedRightClosestWorldIntersection = 0x1b8,
    SEFilteredEstimatedRightAllWorldIntersections = 0x1b9,
    SETrackingState = 0xc0,
    SEEyeglassesStatus = 0xc1,
    SEReflexReductionStateDEPRECATED = 0xc2,
    SELeftBlinkClosingMidTime = 0xe0,
    SELeftBlinkOpeningMidTime = 0xe1,
    SELeftBlinkClosingAmplitude = 0xe2,
    SELeftBlinkOpeningAmplitude = 0xe3,
    SELeftBlinkClosingSpeed = 0xe4,
    SELeftBlinkOpeningSpeed = 0xe5,
    SERightBlinkClosingMidTime = 0xe6,
    SERightBlinkOpeningMidTime = 0xe7,
    SERightBlinkClosingAmplitude = 0xe8,
    SERightBlinkOpeningAmplitude = 0xe9,
    SERightBlinkClosingSpeed = 0xea,
    SERightBlinkOpeningSpeed = 0xeb,
    SELeftEyelidState = 0x390,
    SERightEyelidState = 0x391,
    SEUserMarker = 0x3a0,
    SECameraClocks = 0x3a1,
}

impl std::convert::TryFrom<u16> for SEOutputDataId {
    type Error = ();

    fn try_from(value: u16) -> Result<Self, Self::Error> {
        match value {
            x if x == SEOutputDataId::SEFrameNumber as u16 => Ok(SEOutputDataId::SEFrameNumber),
            x if x == SEOutputDataId::SEEstimatedDelay as u16 => {
                Ok(SEOutputDataId::SEEstimatedDelay)
            }
            x if x == SEOutputDataId::SETimeStamp as u16 => Ok(SEOutputDataId::SETimeStamp),
            x if x == SEOutputDataId::SEUserTimeStamp as u16 => Ok(SEOutputDataId::SEUserTimeStamp),
            x if x == SEOutputDataId::SEFrameRate as u16 => Ok(SEOutputDataId::SEFrameRate),
            x if x == SEOutputDataId::SECameraPositions as u16 => {
                Ok(SEOutputDataId::SECameraPositions)
            }
            x if x == SEOutputDataId::SECameraRotations as u16 => {
                Ok(SEOutputDataId::SECameraRotations)
            }
            x if x == SEOutputDataId::SEUserDefinedData as u16 => {
                Ok(SEOutputDataId::SEUserDefinedData)
            }
            x if x == SEOutputDataId::SERealTimeClock as u16 => Ok(SEOutputDataId::SERealTimeClock),
            x if x == SEOutputDataId::SEHeadPosition as u16 => Ok(SEOutputDataId::SEHeadPosition),
            x if x == SEOutputDataId::SEHeadPositionQ as u16 => Ok(SEOutputDataId::SEHeadPositionQ),
            x if x == SEOutputDataId::SEHeadRotationRodrigues as u16 => {
                Ok(SEOutputDataId::SEHeadRotationRodrigues)
            }
            x if x == SEOutputDataId::SEHeadRotationQuaternion as u16 => {
                Ok(SEOutputDataId::SEHeadRotationQuaternion)
            }
            x if x == SEOutputDataId::SEHeadLeftEarDirection as u16 => {
                Ok(SEOutputDataId::SEHeadLeftEarDirection)
            }
            x if x == SEOutputDataId::SEHeadUpDirection as u16 => {
                Ok(SEOutputDataId::SEHeadUpDirection)
            }
            x if x == SEOutputDataId::SEHeadNoseDirection as u16 => {
                Ok(SEOutputDataId::SEHeadNoseDirection)
            }
            x if x == SEOutputDataId::SEHeadHeading as u16 => Ok(SEOutputDataId::SEHeadHeading),
            x if x == SEOutputDataId::SEHeadPitch as u16 => Ok(SEOutputDataId::SEHeadPitch),
            x if x == SEOutputDataId::SEHeadRoll as u16 => Ok(SEOutputDataId::SEHeadRoll),
            x if x == SEOutputDataId::SEHeadRotationQ as u16 => Ok(SEOutputDataId::SEHeadRotationQ),
            x if x == SEOutputDataId::SEGazeOrigin as u16 => Ok(SEOutputDataId::SEGazeOrigin),
            x if x == SEOutputDataId::SELeftGazeOrigin as u16 => {
                Ok(SEOutputDataId::SELeftGazeOrigin)
            }
            x if x == SEOutputDataId::SERightGazeOrigin as u16 => {
                Ok(SEOutputDataId::SERightGazeOrigin)
            }
            x if x == SEOutputDataId::SEEyePosition as u16 => Ok(SEOutputDataId::SEEyePosition),
            x if x == SEOutputDataId::SEGazeDirection as u16 => Ok(SEOutputDataId::SEGazeDirection),
            x if x == SEOutputDataId::SEGazeDirectionQ as u16 => {
                Ok(SEOutputDataId::SEGazeDirectionQ)
            }
            x if x == SEOutputDataId::SELeftEyePosition as u16 => {
                Ok(SEOutputDataId::SELeftEyePosition)
            }
            x if x == SEOutputDataId::SELeftGazeDirection as u16 => {
                Ok(SEOutputDataId::SELeftGazeDirection)
            }
            x if x == SEOutputDataId::SELeftGazeDirectionQ as u16 => {
                Ok(SEOutputDataId::SELeftGazeDirectionQ)
            }
            x if x == SEOutputDataId::SERightEyePosition as u16 => {
                Ok(SEOutputDataId::SERightEyePosition)
            }
            x if x == SEOutputDataId::SERightGazeDirection as u16 => {
                Ok(SEOutputDataId::SERightGazeDirection)
            }
            x if x == SEOutputDataId::SERightGazeDirectionQ as u16 => {
                Ok(SEOutputDataId::SERightGazeDirectionQ)
            }
            x if x == SEOutputDataId::SEGazeHeading as u16 => Ok(SEOutputDataId::SEGazeHeading),
            x if x == SEOutputDataId::SEGazePitch as u16 => Ok(SEOutputDataId::SEGazePitch),
            x if x == SEOutputDataId::SELeftGazeHeading as u16 => {
                Ok(SEOutputDataId::SELeftGazeHeading)
            }
            x if x == SEOutputDataId::SELeftGazePitch as u16 => Ok(SEOutputDataId::SELeftGazePitch),
            x if x == SEOutputDataId::SERightGazeHeading as u16 => {
                Ok(SEOutputDataId::SERightGazeHeading)
            }
            x if x == SEOutputDataId::SERightGazePitch as u16 => {
                Ok(SEOutputDataId::SERightGazePitch)
            }
            x if x == SEOutputDataId::SEFilteredGazeDirection as u16 => {
                Ok(SEOutputDataId::SEFilteredGazeDirection)
            }
            x if x == SEOutputDataId::SEFilteredGazeDirectionQ as u16 => {
                Ok(SEOutputDataId::SEFilteredGazeDirectionQ)
            }
            x if x == SEOutputDataId::SEFilteredLeftGazeDirection as u16 => {
                Ok(SEOutputDataId::SEFilteredLeftGazeDirection)
            }
            x if x == SEOutputDataId::SEFilteredLeftGazeDirectionQ as u16 => {
                Ok(SEOutputDataId::SEFilteredLeftGazeDirectionQ)
            }
            x if x == SEOutputDataId::SEFilteredRightGazeDirection as u16 => {
                Ok(SEOutputDataId::SEFilteredRightGazeDirection)
            }
            x if x == SEOutputDataId::SEFilteredRightGazeDirectionQ as u16 => {
                Ok(SEOutputDataId::SEFilteredRightGazeDirectionQ)
            }
            x if x == SEOutputDataId::SEFilteredGazeHeading as u16 => {
                Ok(SEOutputDataId::SEFilteredGazeHeading)
            }
            x if x == SEOutputDataId::SEFilteredGazePitch as u16 => {
                Ok(SEOutputDataId::SEFilteredGazePitch)
            }
            x if x == SEOutputDataId::SEFilteredLeftGazeHeading as u16 => {
                Ok(SEOutputDataId::SEFilteredLeftGazeHeading)
            }
            x if x == SEOutputDataId::SEFilteredLeftGazePitch as u16 => {
                Ok(SEOutputDataId::SEFilteredLeftGazePitch)
            }
            x if x == SEOutputDataId::SEFilteredRightGazeHeading as u16 => {
                Ok(SEOutputDataId::SEFilteredRightGazeHeading)
            }
            x if x == SEOutputDataId::SEFilteredRightGazePitch as u16 => {
                Ok(SEOutputDataId::SEFilteredRightGazePitch)
            }
            x if x == SEOutputDataId::SESaccade as u16 => Ok(SEOutputDataId::SESaccade),
            x if x == SEOutputDataId::SEFixation as u16 => Ok(SEOutputDataId::SEFixation),
            x if x == SEOutputDataId::SEBlink as u16 => Ok(SEOutputDataId::SEBlink),
            x if x == SEOutputDataId::SEClosestWorldIntersection as u16 => {
                Ok(SEOutputDataId::SEClosestWorldIntersection)
            }
            x if x == SEOutputDataId::SEFilteredClosestWorldIntersection as u16 => {
                Ok(SEOutputDataId::SEFilteredClosestWorldIntersection)
            }
            x if x == SEOutputDataId::SEAllWorldIntersections as u16 => {
                Ok(SEOutputDataId::SEAllWorldIntersections)
            }
            x if x == SEOutputDataId::SEFilteredAllWorldIntersections as u16 => {
                Ok(SEOutputDataId::SEFilteredAllWorldIntersections)
            }
            x if x == SEOutputDataId::SEZoneId as u16 => Ok(SEOutputDataId::SEZoneId),
            x if x == SEOutputDataId::SEEstimatedClosestWorldIntersection as u16 => {
                Ok(SEOutputDataId::SEEstimatedClosestWorldIntersection)
            }
            x if x == SEOutputDataId::SEEstimatedAllWorldIntersections as u16 => {
                Ok(SEOutputDataId::SEEstimatedAllWorldIntersections)
            }
            x if x == SEOutputDataId::SEHeadClosestWorldIntersection as u16 => {
                Ok(SEOutputDataId::SEHeadClosestWorldIntersection)
            }
            x if x == SEOutputDataId::SEHeadAllWorldIntersections as u16 => {
                Ok(SEOutputDataId::SEHeadAllWorldIntersections)
            }
            x if x == SEOutputDataId::SEEyelidOpening as u16 => Ok(SEOutputDataId::SEEyelidOpening),
            x if x == SEOutputDataId::SEEyelidOpeningQ as u16 => {
                Ok(SEOutputDataId::SEEyelidOpeningQ)
            }
            x if x == SEOutputDataId::SELeftEyelidOpening as u16 => {
                Ok(SEOutputDataId::SELeftEyelidOpening)
            }
            x if x == SEOutputDataId::SELeftEyelidOpeningQ as u16 => {
                Ok(SEOutputDataId::SELeftEyelidOpeningQ)
            }
            x if x == SEOutputDataId::SERightEyelidOpening as u16 => {
                Ok(SEOutputDataId::SERightEyelidOpening)
            }
            x if x == SEOutputDataId::SERightEyelidOpeningQ as u16 => {
                Ok(SEOutputDataId::SERightEyelidOpeningQ)
            }
            x if x == SEOutputDataId::SEKeyboardState as u16 => Ok(SEOutputDataId::SEKeyboardState),
            x if x == SEOutputDataId::SELeftLowerEyelidExtremePoint as u16 => {
                Ok(SEOutputDataId::SELeftLowerEyelidExtremePoint)
            }
            x if x == SEOutputDataId::SELeftUpperEyelidExtremePoint as u16 => {
                Ok(SEOutputDataId::SELeftUpperEyelidExtremePoint)
            }
            x if x == SEOutputDataId::SERightLowerEyelidExtremePoint as u16 => {
                Ok(SEOutputDataId::SERightLowerEyelidExtremePoint)
            }
            x if x == SEOutputDataId::SERightUpperEyelidExtremePoint as u16 => {
                Ok(SEOutputDataId::SERightUpperEyelidExtremePoint)
            }
            x if x == SEOutputDataId::SEPupilDiameter as u16 => Ok(SEOutputDataId::SEPupilDiameter),
            x if x == SEOutputDataId::SEPupilDiameterQ as u16 => {
                Ok(SEOutputDataId::SEPupilDiameterQ)
            }
            x if x == SEOutputDataId::SELeftPupilDiameter as u16 => {
                Ok(SEOutputDataId::SELeftPupilDiameter)
            }
            x if x == SEOutputDataId::SELeftPupilDiameterQ as u16 => {
                Ok(SEOutputDataId::SELeftPupilDiameterQ)
            }
            x if x == SEOutputDataId::SERightPupilDiameter as u16 => {
                Ok(SEOutputDataId::SERightPupilDiameter)
            }
            x if x == SEOutputDataId::SERightPupilDiameterQ as u16 => {
                Ok(SEOutputDataId::SERightPupilDiameterQ)
            }
            x if x == SEOutputDataId::SEFilteredPupilDiameter as u16 => {
                Ok(SEOutputDataId::SEFilteredPupilDiameter)
            }
            x if x == SEOutputDataId::SEFilteredPupilDiameterQ as u16 => {
                Ok(SEOutputDataId::SEFilteredPupilDiameterQ)
            }
            x if x == SEOutputDataId::SEFilteredLeftPupilDiameter as u16 => {
                Ok(SEOutputDataId::SEFilteredLeftPupilDiameter)
            }
            x if x == SEOutputDataId::SEFilteredLeftPupilDiameterQ as u16 => {
                Ok(SEOutputDataId::SEFilteredLeftPupilDiameterQ)
            }
            x if x == SEOutputDataId::SEFilteredRightPupilDiameter as u16 => {
                Ok(SEOutputDataId::SEFilteredRightPupilDiameter)
            }
            x if x == SEOutputDataId::SEFilteredRightPupilDiameterQ as u16 => {
                Ok(SEOutputDataId::SEFilteredRightPupilDiameterQ)
            }
            x if x == SEOutputDataId::SEGPSPosition as u16 => Ok(SEOutputDataId::SEGPSPosition),
            x if x == SEOutputDataId::SEGPSGroundSpeed as u16 => {
                Ok(SEOutputDataId::SEGPSGroundSpeed)
            }
            x if x == SEOutputDataId::SEGPSCourse as u16 => Ok(SEOutputDataId::SEGPSCourse),
            x if x == SEOutputDataId::SEGPSTime as u16 => Ok(SEOutputDataId::SEGPSTime),
            x if x == SEOutputDataId::SEEstimatedGazeOrigin as u16 => {
                Ok(SEOutputDataId::SEEstimatedGazeOrigin)
            }
            x if x == SEOutputDataId::SEEstimatedLeftGazeOrigin as u16 => {
                Ok(SEOutputDataId::SEEstimatedLeftGazeOrigin)
            }
            x if x == SEOutputDataId::SEEstimatedRightGazeOrigin as u16 => {
                Ok(SEOutputDataId::SEEstimatedRightGazeOrigin)
            }
            x if x == SEOutputDataId::SEEstimatedEyePosition as u16 => {
                Ok(SEOutputDataId::SEEstimatedEyePosition)
            }
            x if x == SEOutputDataId::SEEstimatedGazeDirection as u16 => {
                Ok(SEOutputDataId::SEEstimatedGazeDirection)
            }
            x if x == SEOutputDataId::SEEstimatedGazeDirectionQ as u16 => {
                Ok(SEOutputDataId::SEEstimatedGazeDirectionQ)
            }
            x if x == SEOutputDataId::SEEstimatedGazeHeading as u16 => {
                Ok(SEOutputDataId::SEEstimatedGazeHeading)
            }
            x if x == SEOutputDataId::SEEstimatedGazePitch as u16 => {
                Ok(SEOutputDataId::SEEstimatedGazePitch)
            }
            x if x == SEOutputDataId::SEEstimatedLeftEyePosition as u16 => {
                Ok(SEOutputDataId::SEEstimatedLeftEyePosition)
            }
            x if x == SEOutputDataId::SEEstimatedLeftGazeDirection as u16 => {
                Ok(SEOutputDataId::SEEstimatedLeftGazeDirection)
            }
            x if x == SEOutputDataId::SEEstimatedLeftGazeDirectionQ as u16 => {
                Ok(SEOutputDataId::SEEstimatedLeftGazeDirectionQ)
            }
            x if x == SEOutputDataId::SEEstimatedLeftGazeHeading as u16 => {
                Ok(SEOutputDataId::SEEstimatedLeftGazeHeading)
            }
            x if x == SEOutputDataId::SEEstimatedLeftGazePitch as u16 => {
                Ok(SEOutputDataId::SEEstimatedLeftGazePitch)
            }
            x if x == SEOutputDataId::SEEstimatedRightEyePosition as u16 => {
                Ok(SEOutputDataId::SEEstimatedRightEyePosition)
            }
            x if x == SEOutputDataId::SEEstimatedRightGazeDirection as u16 => {
                Ok(SEOutputDataId::SEEstimatedRightGazeDirection)
            }
            x if x == SEOutputDataId::SEEstimatedRightGazeDirectionQ as u16 => {
                Ok(SEOutputDataId::SEEstimatedRightGazeDirectionQ)
            }
            x if x == SEOutputDataId::SEEstimatedRightGazeHeading as u16 => {
                Ok(SEOutputDataId::SEEstimatedRightGazeHeading)
            }
            x if x == SEOutputDataId::SEEstimatedRightGazePitch as u16 => {
                Ok(SEOutputDataId::SEEstimatedRightGazePitch)
            }
            x if x == SEOutputDataId::SEFilteredEstimatedGazeDirection as u16 => {
                Ok(SEOutputDataId::SEFilteredEstimatedGazeDirection)
            }
            x if x == SEOutputDataId::SEFilteredEstimatedGazeDirectionQ as u16 => {
                Ok(SEOutputDataId::SEFilteredEstimatedGazeDirectionQ)
            }
            x if x == SEOutputDataId::SEFilteredEstimatedGazeHeading as u16 => {
                Ok(SEOutputDataId::SEFilteredEstimatedGazeHeading)
            }
            x if x == SEOutputDataId::SEFilteredEstimatedGazePitch as u16 => {
                Ok(SEOutputDataId::SEFilteredEstimatedGazePitch)
            }
            x if x == SEOutputDataId::SEFilteredEstimatedLeftGazeDirection as u16 => {
                Ok(SEOutputDataId::SEFilteredEstimatedLeftGazeDirection)
            }
            x if x == SEOutputDataId::SEFilteredEstimatedLeftGazeDirectionQ as u16 => {
                Ok(SEOutputDataId::SEFilteredEstimatedLeftGazeDirectionQ)
            }
            x if x == SEOutputDataId::SEFilteredEstimatedLeftGazeHeading as u16 => {
                Ok(SEOutputDataId::SEFilteredEstimatedLeftGazeHeading)
            }
            x if x == SEOutputDataId::SEFilteredEstimatedLeftGazePitch as u16 => {
                Ok(SEOutputDataId::SEFilteredEstimatedLeftGazePitch)
            }
            x if x == SEOutputDataId::SEFilteredEstimatedRightGazeDirection as u16 => {
                Ok(SEOutputDataId::SEFilteredEstimatedRightGazeDirection)
            }
            x if x == SEOutputDataId::SEFilteredEstimatedRightGazeDirectionQ as u16 => {
                Ok(SEOutputDataId::SEFilteredEstimatedRightGazeDirectionQ)
            }
            x if x == SEOutputDataId::SEFilteredEstimatedRightGazeHeading as u16 => {
                Ok(SEOutputDataId::SEFilteredEstimatedRightGazeHeading)
            }
            x if x == SEOutputDataId::SEFilteredEstimatedRightGazePitch as u16 => {
                Ok(SEOutputDataId::SEFilteredEstimatedRightGazePitch)
            }
            x if x == SEOutputDataId::SEASCIIKeyboardState as u16 => {
                Ok(SEOutputDataId::SEASCIIKeyboardState)
            }
            x if x == SEOutputDataId::SECalibrationGazeIntersection as u16 => {
                Ok(SEOutputDataId::SECalibrationGazeIntersection)
            }
            x if x == SEOutputDataId::SETaggedGazeIntersection as u16 => {
                Ok(SEOutputDataId::SETaggedGazeIntersection)
            }
            x if x == SEOutputDataId::SELeftClosestWorldIntersection as u16 => {
                Ok(SEOutputDataId::SELeftClosestWorldIntersection)
            }
            x if x == SEOutputDataId::SELeftAllWorldIntersections as u16 => {
                Ok(SEOutputDataId::SELeftAllWorldIntersections)
            }
            x if x == SEOutputDataId::SERightClosestWorldIntersection as u16 => {
                Ok(SEOutputDataId::SERightClosestWorldIntersection)
            }
            x if x == SEOutputDataId::SERightAllWorldIntersections as u16 => {
                Ok(SEOutputDataId::SERightAllWorldIntersections)
            }
            x if x == SEOutputDataId::SEFilteredLeftClosestWorldIntersection as u16 => {
                Ok(SEOutputDataId::SEFilteredLeftClosestWorldIntersection)
            }
            x if x == SEOutputDataId::SEFilteredLeftAllWorldIntersections as u16 => {
                Ok(SEOutputDataId::SEFilteredLeftAllWorldIntersections)
            }
            x if x == SEOutputDataId::SEFilteredRightClosestWorldIntersection as u16 => {
                Ok(SEOutputDataId::SEFilteredRightClosestWorldIntersection)
            }
            x if x == SEOutputDataId::SEFilteredRightAllWorldIntersections as u16 => {
                Ok(SEOutputDataId::SEFilteredRightAllWorldIntersections)
            }
            x if x == SEOutputDataId::SEEstimatedLeftClosestWorldIntersection as u16 => {
                Ok(SEOutputDataId::SEEstimatedLeftClosestWorldIntersection)
            }
            x if x == SEOutputDataId::SEEstimatedLeftAllWorldIntersections as u16 => {
                Ok(SEOutputDataId::SEEstimatedLeftAllWorldIntersections)
            }
            x if x == SEOutputDataId::SEEstimatedRightClosestWorldIntersection as u16 => {
                Ok(SEOutputDataId::SEEstimatedRightClosestWorldIntersection)
            }
            x if x == SEOutputDataId::SEEstimatedRightAllWorldIntersections as u16 => {
                Ok(SEOutputDataId::SEEstimatedRightAllWorldIntersections)
            }
            x if x == SEOutputDataId::SEFilteredEstimatedClosestWorldIntersection as u16 => {
                Ok(SEOutputDataId::SEFilteredEstimatedClosestWorldIntersection)
            }
            x if x == SEOutputDataId::SEFilteredEstimatedAllWorldIntersections as u16 => {
                Ok(SEOutputDataId::SEFilteredEstimatedAllWorldIntersections)
            }
            x if x == SEOutputDataId::SEFilteredEstimatedLeftClosestWorldIntersection as u16 => {
                Ok(SEOutputDataId::SEFilteredEstimatedLeftClosestWorldIntersection)
            }
            x if x == SEOutputDataId::SEFilteredEstimatedLeftAllWorldIntersections as u16 => {
                Ok(SEOutputDataId::SEFilteredEstimatedLeftAllWorldIntersections)
            }
            x if x == SEOutputDataId::SEFilteredEstimatedRightClosestWorldIntersection as u16 => {
                Ok(SEOutputDataId::SEFilteredEstimatedRightClosestWorldIntersection)
            }
            x if x == SEOutputDataId::SEFilteredEstimatedRightAllWorldIntersections as u16 => {
                Ok(SEOutputDataId::SEFilteredEstimatedRightAllWorldIntersections)
            }
            x if x == SEOutputDataId::SETrackingState as u16 => Ok(SEOutputDataId::SETrackingState),
            x if x == SEOutputDataId::SEEyeglassesStatus as u16 => {
                Ok(SEOutputDataId::SEEyeglassesStatus)
            }
            x if x == SEOutputDataId::SEReflexReductionStateDEPRECATED as u16 => {
                Ok(SEOutputDataId::SEReflexReductionStateDEPRECATED)
            }
            x if x == SEOutputDataId::SELeftBlinkClosingMidTime as u16 => {
                Ok(SEOutputDataId::SELeftBlinkClosingMidTime)
            }
            x if x == SEOutputDataId::SELeftBlinkOpeningMidTime as u16 => {
                Ok(SEOutputDataId::SELeftBlinkOpeningMidTime)
            }
            x if x == SEOutputDataId::SELeftBlinkClosingAmplitude as u16 => {
                Ok(SEOutputDataId::SELeftBlinkClosingAmplitude)
            }
            x if x == SEOutputDataId::SELeftBlinkOpeningAmplitude as u16 => {
                Ok(SEOutputDataId::SELeftBlinkOpeningAmplitude)
            }
            x if x == SEOutputDataId::SELeftBlinkClosingSpeed as u16 => {
                Ok(SEOutputDataId::SELeftBlinkClosingSpeed)
            }
            x if x == SEOutputDataId::SELeftBlinkOpeningSpeed as u16 => {
                Ok(SEOutputDataId::SELeftBlinkOpeningSpeed)
            }
            x if x == SEOutputDataId::SERightBlinkClosingMidTime as u16 => {
                Ok(SEOutputDataId::SERightBlinkClosingMidTime)
            }
            x if x == SEOutputDataId::SERightBlinkOpeningMidTime as u16 => {
                Ok(SEOutputDataId::SERightBlinkOpeningMidTime)
            }
            x if x == SEOutputDataId::SERightBlinkClosingAmplitude as u16 => {
                Ok(SEOutputDataId::SERightBlinkClosingAmplitude)
            }
            x if x == SEOutputDataId::SERightBlinkOpeningAmplitude as u16 => {
                Ok(SEOutputDataId::SERightBlinkOpeningAmplitude)
            }
            x if x == SEOutputDataId::SERightBlinkClosingSpeed as u16 => {
                Ok(SEOutputDataId::SERightBlinkClosingSpeed)
            }
            x if x == SEOutputDataId::SERightBlinkOpeningSpeed as u16 => {
                Ok(SEOutputDataId::SERightBlinkOpeningSpeed)
            }
            x if x == SEOutputDataId::SELeftEyelidState as u16 => {
                Ok(SEOutputDataId::SELeftEyelidState)
            }
            x if x == SEOutputDataId::SERightEyelidState as u16 => {
                Ok(SEOutputDataId::SERightEyelidState)
            }
            x if x == SEOutputDataId::SEUserMarker as u16 => Ok(SEOutputDataId::SEUserMarker),
            x if x == SEOutputDataId::SECameraClocks as u16 => Ok(SEOutputDataId::SECameraClocks),

            _ => unimplemented!("{:#x}", value),
        }
    }
}
